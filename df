[33mcommit 7095d02ab65b867b889e6db8e8d60cb1a503fff0[m[33m ([m[1;36mHEAD -> [m[1;32mmain_ver_4[m[33m, [m[1;31morigin/main_ver_4[m[33m)[m
Author: nikodim <nikodimcheer@gmail.com>
Date:   Fri Jan 8 10:35:48 2021 +0800

    Rendering is restored. Now I have DrawEngine class which entirely holds the graphics.
    it works via DrawStates which are simple structures with data for drawing.
    They can be accessed via name so all interaction is : "BeginDraw()" in the beginning of the frame, configurations for required states, OnDraw methods to bind some drawable objects to particular states and EndDraw() in the end of the frame.
    That's it, now rendering works withiout textures because I haven't worked with material's textures. But I changed shaders.
    Now shaders has SubShaders explicitly. AShader processes entire shader code and creates ASubShader instances depending on the code. These subshaders essentially preprocess own chunks of code which are provided by AShader and they change AShader attributes.
    AShader attributes are: vtxLayout for vertex attributes and shdLayout for uniform blocks.
    About uniform blocks: I added UniformBufferObjects of OpenGL as abstracted AShaderBuf object. This "shader buffer" as other graphics buffers belongs to the DrawEngine class. It can set any uniform data into shaders due to shaderLayout which is set while compilation of shader.
    But I think need some standards and rules anyway. Otherwise I need to provide an interface for detail configurations.
    So, DrawEngine sets camera projection and view matrices into the ShaderBuffer and draws everything it needs in queues.

[33mcommit 1c8bfbbfbe67eaad9900037f08d1efebaa17338b[m
Author: nikodim <nikodimcheer@gmail.com>
Date:   Thu Jan 7 10:35:52 2021 +0800

    I remade rendering, changed a couple of names, added files for future physics engine. Drawer is GraphEngine now, Engine class is CoreEngine and EngineState  is renamed to CoreState.
    Now rendering doesn't work because I need to make proper material system. Now I am very concerned about materials, shaders and cameras.
    I need some system to sort all drawable objects, materials and set appropriate cameras for them.
    I think the best way is to make one segment of code same as GuiSys::BeginDraw-EndDraw but with GraphEngine. Yes, it should be already, but some issues doesn't let me to do that.
    Then, I will make associacitive lists, layers or something else to sort everything in order.
    I just need a bunch of settings in one single thing such as layer or list. I can make even states. Yes, my engine systems can be state machienes!
    I will make special states for GraphEngine which will get cameras, materials and draw orders!
    And this will help me to keep everything in order and draw in a single draw call.

[33mcommit 92d6a70353d59a75e0ff3509789c4eed81ada8f2[m
Author: nikodim <nikodimcheer@gmail.com>
Date:   Thu Jan 7 10:34:19 2021 +0800

    this is just lua binaries. I don't know what to do with this in git. But now I am reading learn-git book and probably I will become better with it.

[33mcommit f63adee8902d21133a46d321cf47631df6e4ce47[m
Author: Nikodim Cherepanov <nikodim.cheer17@mail.ru>
Date:   Tue Jan 5 12:03:18 2021 +0800

    And just over again... I am going to leave old 3d version of my engine and make new main_ver_4 branch from the main

[33mcommit ec869915bf357c177d50881275a8e9fd7cc59eb4[m
Author: Nikodim Cherepanov <nikodim.cheer17@mail.ru>
Date:   Tue Jan 5 11:50:01 2021 +0800

    Again, I don't know git very well, but I refactored all the code.

[33mcommit c943753ce4506ffbc812650210886e700f439f39[m
Author: Nikodim Cherepanov <nikodim.cheer17@mail.ru>
Date:   Tue Jan 5 11:47:32 2021 +0800

    Entire project was redone for one night. I renamed every single file and all engine into NW - "NativeWorld" name. Also, I changed materials, framebuffers and "codable" objects.
    Now they are all inherited from ADataRes and can be managed by DataSys

[33mcommit 4fa3d19c649ceea03b2a4da87ea6da8301635dc6[m[33m ([m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Sun Oct 25 04:46:19 2020 +0800

    Renderer works great, shaders are going to be changed. Text render is next target

[33mcommit f3b0c2b7f3d354dbff7d9ae28eef1c84b26ed4aa[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Sat Oct 24 03:08:59 2020 +0800

    Render is working, I have added VertexArr, GLBuffer and derrived VertexBuf, IndexBuf, and two structures: BufferLayout for VAO which takes VBO attributes, VertexAttrib for VBO which contains vertex pointer data.
    Also, buffer information is described in the struct BufferData of GLBuffer

[33mcommit f8f4016951e459da9352e21be88e55c4ebf97a95[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Wed Oct 21 15:59:32 2020 +0800

    Work with renderer and new classes/structures:
    Vertex2/3 structs
    
    VertexAttrib struct - for VBO
    BufferLayout struct - for VAO
    
    VertexArray class
    VertexBuffer class
    IndexBuffer class

[33mcommit be18222e7082e5b850ad34b8c980f59d103c6ced[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Wed Oct 21 06:06:28 2020 +0800

    Everything is reloaded

[33mcommit d923362162889235101a4b57b95fe08302a37a4c[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Sun Oct 18 15:06:34 2020 +0800

    New event system and window class

[33mcommit c10d75605edf1e3dfe9521593d044aba61087f18[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Sun Oct 18 03:59:00 2020 +0800

    Entry point has been fixed and pch is done

[33mcommit 2f014bb8b9fbdc4d6c819c2199d63da55cc1d593[m
Author: Nikodim <artem.cherepanov17@mail.ru>
Date:   Sat Oct 17 15:51:50 2020 +0800

    The Beginning Of the project. My basic plan-headers are created

[33mcommit a0062f04173137483f44713a1f6cc074e42bf7a1[m
Author: Natlys_Art <62613226+Natlys@users.noreply.github.com>
Date:   Sat Oct 17 14:16:59 2020 +0800

    Initial commit
